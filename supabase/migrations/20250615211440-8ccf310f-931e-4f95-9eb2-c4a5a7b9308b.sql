
-- 1. Table for daily check-ins (mood, energy, reflection, etc.)
create table public.daily_checkins (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  plan_id uuid references public.user_plans(id) on delete cascade,
  date date not null,
  mood integer,
  energy integer,
  reflection text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  unique (user_id, plan_id, date)
);

-- 2. Table for tracking per-day habits/tasks completion
create table public.daily_progress (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  plan_id uuid references public.user_plans(id) on delete cascade,
  date date not null,
  habits_completed boolean[] not null default '{}',
  tasks_completed boolean[] not null default '{}',
  updated_at timestamptz not null default now(),
  unique (user_id, plan_id, date)
);

-- 3. Table for plan adaptations suggested by AI
create table public.plan_adaptations (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  plan_id uuid references public.user_plans(id) on delete cascade,
  adaptation_type text not null, -- e.g., "habit_recommendation", "goal_adjustment"
  suggestion jsonb not null,
  accepted boolean default null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- 4. User insights generated by AI
create table public.user_insights (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  plan_id uuid references public.user_plans(id) on delete cascade,
  date date not null,
  insight_text text not null,
  -- Optionally: link to a check-in/adaptation
  related_checkin uuid references public.daily_checkins(id),
  related_adaptation uuid references public.plan_adaptations(id),
  created_at timestamptz not null default now()
);

-- Enable RLS
alter table public.daily_checkins enable row level security;
alter table public.daily_progress enable row level security;
alter table public.plan_adaptations enable row level security;
alter table public.user_insights enable row level security;

-- RLS policies (user can only see/manage their data)
create policy "Users can view their own checkins" on public.daily_checkins
  for select using (auth.uid() = user_id);
create policy "Users can manage their own checkins" on public.daily_checkins
  for all using (auth.uid() = user_id);

create policy "Users can view their own daily progress" on public.daily_progress
  for select using (auth.uid() = user_id);
create policy "Users can manage their own daily progress" on public.daily_progress
  for all using (auth.uid() = user_id);

create policy "Users can view their own adaptations" on public.plan_adaptations
  for select using (auth.uid() = user_id);
create policy "Users can manage their own adaptations" on public.plan_adaptations
  for all using (auth.uid() = user_id);

create policy "Users can view their own insights" on public.user_insights
  for select using (auth.uid() = user_id);
create policy "Users can manage their own insights" on public.user_insights
  for all using (auth.uid() = user_id);

-- Indexes for performance
create index if not exists idx_daily_checkins_user_plan_date on public.daily_checkins(user_id, plan_id, date);
create index if not exists idx_daily_progress_user_plan_date on public.daily_progress(user_id, plan_id, date);
create index if not exists idx_plan_adaptations_user_plan on public.plan_adaptations(user_id, plan_id);
create index if not exists idx_user_insights_user_plan_date on public.user_insights(user_id, plan_id, date);

